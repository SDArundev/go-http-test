// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, password, is_admin FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, is_admin FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const login = `-- name: Login :one
SELECT id, username, password, is_admin FROM users
WHERE username = $1 AND password = crypt($2, password)
`

type LoginParams struct {
	Username string      `json:"username"`
	Password interface{} `json:"password"`
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRow(ctx, login, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const register = `-- name: Register :exec
INSERT INTO users (username, password)
VALUES ($1, crypt($2, gen_salt('bf')))
`

type RegisterParams struct {
	Username string      `json:"username"`
	Password interface{} `json:"password"`
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) error {
	_, err := q.db.Exec(ctx, register, arg.Username, arg.Password)
	return err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, username, password, is_admin FROM users
WHERE username ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchUsers(ctx context.Context, username pgtype.Text) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsers, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const verifyIfUserIsAdmin = `-- name: VerifyIfUserIsAdmin :one
SELECT is_admin FROM users
WHERE username = $1 AND is_admin = TRUE
`

func (q *Queries) VerifyIfUserIsAdmin(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, verifyIfUserIsAdmin, username)
	var is_admin bool
	err := row.Scan(&is_admin)
	return is_admin, err
}
